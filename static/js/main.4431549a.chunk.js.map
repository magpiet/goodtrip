{"version":3,"sources":["logo192.png","sza.mp3","Cards.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","className","src","logo","alt","Menu","props","onReturnHome","onRouteChange","state","React","Component","App","playAudio","play","setState","audio","pause","onClickImage","route","Audio","sza","this","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,sPCgB5BC,G,MAZF,WACZ,OACC,yBAAKC,UAAU,uCACd,yBAAKC,IAAKC,IAAMC,IAAI,GAAGH,UAAU,UACjC,6BACC,sCACA,wCCYWI,E,kDAlBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAIPC,aAAe,WACd,EAAKD,MAAME,cAAc,SAJzB,EAAKC,MAAQ,GAFK,E,qDAUlB,OACC,yBAAKR,UAAU,YACd,kBAAC,EAAD,W,GAbeS,IAAMC,WCoDVC,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAQFC,UAAY,WACP,EAAKJ,MAAMK,MACZ,EAAKC,SAAS,CAACD,MAAM,IACrB,EAAKE,MAAMF,SAEX,EAAKC,SAAS,CAACD,MAAM,IACrB,EAAKE,MAAMC,UAfD,EAmBdC,aAAe,WACb,EAAKV,cAAc,SApBP,EAuBdA,cAAgB,SAACW,GACf,EAAKJ,SAAS,CAACI,MAAOA,KAtBtB,EAAKV,MAAQ,CACXK,MAAM,EACNK,MAAO,QAET,EAAKH,MAAQ,IAAII,MAAMC,KANX,E,qDA4BX,OACG,yBAAKpB,UAAU,OACW,SAArBqB,KAAKb,MAAMU,MACV,kBAAC,EAAD,CAAMX,cAAec,KAAKd,gBAE1B,yBAAKP,UAAU,cACb,uBAAGsB,QAASD,KAAKJ,aAAcjB,UAAU,mBACvC,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3C,yBAAKH,UAAU,sBACb,uBAAGsB,QAASD,KAAKT,UAAWZ,UAAU,2BAAtC,6C,GAvCAS,IAAMC,WCKlBa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9B,QACfwB,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,aAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.4431549a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.40be35d2.png\";","module.exports = __webpack_public_path__ + \"static/media/sza.64f7f6c6.mp3\";","import React from 'react';\r\nimport './Cards.css';\r\nimport logo from './logo192.png';\r\n\r\nconst Card = () => {\r\n\treturn (\r\n\t\t<div className='pa4 tc bg-light-red h w br3 fade-in'>\r\n\t\t\t<img src={logo} alt='' className='h4 w4'/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Magnus</h2>\r\n\t\t\t\t<p>Nazar</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\nclass Menu extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\tonReturnHome = () => {\r\n\t\tthis.props.onRouteChange('home');\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div className='menu pa5'>\r\n\t\t\t\t<Cards />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Menu;","import React from 'react';\nimport logo from './logo192.png';\nimport './App.css';\nimport 'tachyons';\nimport sza from './sza.mp3';\nimport Menu from './Menu';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      play: true,\n      route: 'home'\n    }\n    this.audio = new Audio(sza);\n  }\n\n  playAudio = () => {\n    if(this.state.play) {\n      this.setState({play: false});\n      this.audio.play();\n    } else {\n      this.setState({play: true});\n      this.audio.pause();\n    }\n  }\n\n  onClickImage = () => {\n    this.onRouteChange('menu');\n  }\n\n  onRouteChange = (route) => {\n    this.setState({route: route});\n  }\n\n  render() {\n     return (\n        <div className=\"App\">\n            {this.state.route === 'menu' ?\n              <Menu onRouteChange={this.onRouteChange} />\n              :\n              <div className=\"App-header\">\n                <p onClick={this.onClickImage} className=\"fade-in pointer\">\n                  <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                </p>\n                <div className=\"typewriter fade-in\">\n                  <p onClick={this.playAudio} className=\"typewriter-text pointer\">Welcome! Press the Nazar to join. </p>\n                </div>\n              </div>\n            } \n        </div>\n     );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}